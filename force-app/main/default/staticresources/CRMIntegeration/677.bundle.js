"use strict";(self.webpackChunkcrm_integration=self.webpackChunkcrm_integration||[]).push([[677],{23508:function(e,t,n){var o=n(64836);t.Z=void 0;var r=o(n(61268)),i=n(85893),a=(0,r.default)((0,i.jsx)("path",{d:"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"}),"ExpandMore");t.Z=a},85092:function(e,t,n){n.d(t,{Z:function(){return g}});var o=n(87462),r=n(63366),i=n(67294),a=n(86010),s=n(94780),d=n(61974),l=n(16122),c=n(1588),u=n(34867);function p(e){return(0,u.Z)("MuiAccordionDetails",e)}(0,c.Z)("MuiAccordionDetails",["root"]);var m=n(85893);const h=["className"],f=(0,d.ZP)("div",{name:"MuiAccordionDetails",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e})=>({padding:e.spacing(1,2,2)})));var g=i.forwardRef((function(e,t){const n=(0,l.Z)({props:e,name:"MuiAccordionDetails"}),{className:i}=n,d=(0,r.Z)(n,h),c=n,u=(e=>{const{classes:t}=e;return(0,s.Z)({root:["root"]},p,t)})(c);return(0,m.jsx)(f,(0,o.Z)({className:(0,a.Z)(u.root,i),ref:t,ownerState:c},d))}))},47425:function(e,t,n){n.d(t,{Z:function(){return y}});var o=n(63366),r=n(87462),i=n(67294),a=n(86010),s=n(94780),d=n(61974),l=n(16122),c=n(60539),u=n(64861),p=n(1588),m=n(34867);function h(e){return(0,m.Z)("MuiAccordionSummary",e)}var f=(0,p.Z)("MuiAccordionSummary",["root","expanded","focusVisible","disabled","gutters","contentGutters","content","expandIconWrapper"]),g=n(85893);const x=["children","className","expandIcon","focusVisibleClassName","onClick"],b=(0,d.ZP)(c.Z,{name:"MuiAccordionSummary",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{const n={duration:e.transitions.duration.shortest};return(0,r.Z)({display:"flex",minHeight:48,padding:e.spacing(0,2),transition:e.transitions.create(["min-height","background-color"],n),[`&.${f.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${f.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`&:hover:not(.${f.disabled})`]:{cursor:"pointer"}},!t.disableGutters&&{[`&.${f.expanded}`]:{minHeight:64}})})),Z=(0,d.ZP)("div",{name:"MuiAccordionSummary",slot:"Content",overridesResolver:(e,t)=>t.content})((({theme:e,ownerState:t})=>(0,r.Z)({display:"flex",flexGrow:1,margin:"12px 0"},!t.disableGutters&&{transition:e.transitions.create(["margin"],{duration:e.transitions.duration.shortest}),[`&.${f.expanded}`]:{margin:"20px 0"}}))),v=(0,d.ZP)("div",{name:"MuiAccordionSummary",slot:"ExpandIconWrapper",overridesResolver:(e,t)=>t.expandIconWrapper})((({theme:e})=>({display:"flex",color:(e.vars||e).palette.action.active,transform:"rotate(0deg)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shortest}),[`&.${f.expanded}`]:{transform:"rotate(180deg)"}})));var y=i.forwardRef((function(e,t){const n=(0,l.Z)({props:e,name:"MuiAccordionSummary"}),{children:d,className:c,expandIcon:p,focusVisibleClassName:m,onClick:f}=n,y=(0,o.Z)(n,x),{disabled:w=!1,disableGutters:R,expanded:C,toggle:S}=i.useContext(u.Z),E=(0,r.Z)({},n,{expanded:C,disabled:w,disableGutters:R}),M=(e=>{const{classes:t,expanded:n,disabled:o,disableGutters:r}=e,i={root:["root",n&&"expanded",o&&"disabled",!r&&"gutters"],focusVisible:["focusVisible"],content:["content",n&&"expanded",!r&&"contentGutters"],expandIconWrapper:["expandIconWrapper",n&&"expanded"]};return(0,s.Z)(i,h,t)})(E);return(0,g.jsxs)(b,(0,r.Z)({focusRipple:!1,disableRipple:!0,disabled:w,component:"div","aria-expanded":C,className:(0,a.Z)(M.root,c),focusVisibleClassName:(0,a.Z)(M.focusVisible,m),onClick:e=>{S&&S(e),f&&f(e)},ref:t,ownerState:E},y,{children:[(0,g.jsx)(Z,{className:M.content,ownerState:E,children:d}),p&&(0,g.jsx)(v,{className:M.expandIconWrapper,ownerState:E,children:p})]}))}))},69941:function(e,t,n){n.d(t,{Z:function(){return k}});var o=n(63366),r=n(87462),i=n(67294),a=(n(76607),n(86010)),s=n(94780),d=n(61974),l=n(16122),c=n(12666),u=n(96067),p=n(30577),m=n(2734),h=n(51705),f=n(1588),g=n(34867);function x(e){return(0,g.Z)("MuiCollapse",e)}(0,f.Z)("MuiCollapse",["root","horizontal","vertical","entered","hidden","wrapper","wrapperInner"]);var b=n(85893);const Z=["addEndListener","children","className","collapsedSize","component","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","orientation","style","timeout","TransitionComponent"],v=(0,d.ZP)("div",{name:"MuiCollapse",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.orientation],"entered"===n.state&&t.entered,"exited"===n.state&&!n.in&&"0px"===n.collapsedSize&&t.hidden]}})((({theme:e,ownerState:t})=>(0,r.Z)({height:0,overflow:"hidden",transition:e.transitions.create("height")},"horizontal"===t.orientation&&{height:"auto",width:0,transition:e.transitions.create("width")},"entered"===t.state&&(0,r.Z)({height:"auto",overflow:"visible"},"horizontal"===t.orientation&&{width:"auto"}),"exited"===t.state&&!t.in&&"0px"===t.collapsedSize&&{visibility:"hidden"}))),y=(0,d.ZP)("div",{name:"MuiCollapse",slot:"Wrapper",overridesResolver:(e,t)=>t.wrapper})((({ownerState:e})=>(0,r.Z)({display:"flex",width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),w=(0,d.ZP)("div",{name:"MuiCollapse",slot:"WrapperInner",overridesResolver:(e,t)=>t.wrapperInner})((({ownerState:e})=>(0,r.Z)({width:"100%"},"horizontal"===e.orientation&&{width:"auto",height:"100%"}))),R=i.forwardRef((function(e,t){const n=(0,l.Z)({props:e,name:"MuiCollapse"}),{addEndListener:d,children:f,className:g,collapsedSize:R="0px",component:C,easing:S,in:E,onEnter:M,onEntered:A,onEntering:N,onExit:$,onExited:G,onExiting:k,orientation:I="vertical",style:j,timeout:T=u.x9.standard,TransitionComponent:z=c.ZP}=n,P=(0,o.Z)(n,Z),D=(0,r.Z)({},n,{orientation:I,collapsedSize:R}),W=(e=>{const{orientation:t,classes:n}=e,o={root:["root",`${t}`],entered:["entered"],hidden:["hidden"],wrapper:["wrapper",`${t}`],wrapperInner:["wrapperInner",`${t}`]};return(0,s.Z)(o,x,n)})(D),V=(0,m.Z)(),q=i.useRef(),B=i.useRef(null),H=i.useRef(),L="number"==typeof R?`${R}px`:R,F="horizontal"===I,_=F?"width":"height";i.useEffect((()=>()=>{clearTimeout(q.current)}),[]);const O=i.useRef(null),J=(0,h.Z)(t,O),K=e=>t=>{if(e){const n=O.current;void 0===t?e(n):e(n,t)}},Q=()=>B.current?B.current[F?"clientWidth":"clientHeight"]:0,U=K(((e,t)=>{B.current&&F&&(B.current.style.position="absolute"),e.style[_]=L,M&&M(e,t)})),X=K(((e,t)=>{const n=Q();B.current&&F&&(B.current.style.position="");const{duration:o,easing:r}=(0,p.C)({style:j,timeout:T,easing:S},{mode:"enter"});if("auto"===T){const t=V.transitions.getAutoHeightDuration(n);e.style.transitionDuration=`${t}ms`,H.current=t}else e.style.transitionDuration="string"==typeof o?o:`${o}ms`;e.style[_]=`${n}px`,e.style.transitionTimingFunction=r,N&&N(e,t)})),Y=K(((e,t)=>{e.style[_]="auto",A&&A(e,t)})),ee=K((e=>{e.style[_]=`${Q()}px`,$&&$(e)})),te=K(G),ne=K((e=>{const t=Q(),{duration:n,easing:o}=(0,p.C)({style:j,timeout:T,easing:S},{mode:"exit"});if("auto"===T){const n=V.transitions.getAutoHeightDuration(t);e.style.transitionDuration=`${n}ms`,H.current=n}else e.style.transitionDuration="string"==typeof n?n:`${n}ms`;e.style[_]=L,e.style.transitionTimingFunction=o,k&&k(e)}));return(0,b.jsx)(z,(0,r.Z)({in:E,onEnter:U,onEntered:Y,onEntering:X,onExit:ee,onExited:te,onExiting:ne,addEndListener:e=>{"auto"===T&&(q.current=setTimeout(e,H.current||0)),d&&d(O.current,e)},nodeRef:O,timeout:"auto"===T?null:T},P,{children:(e,t)=>(0,b.jsx)(v,(0,r.Z)({as:C,className:(0,a.Z)(W.root,g,{entered:W.entered,exited:!E&&"0px"===L&&W.hidden}[e]),style:(0,r.Z)({[F?"minWidth":"minHeight"]:L},j),ownerState:(0,r.Z)({},D,{state:e}),ref:J},t,{children:(0,b.jsx)(y,{ownerState:(0,r.Z)({},D,{state:e}),className:W.wrapper,ref:B,children:(0,b.jsx)(w,{ownerState:(0,r.Z)({},D,{state:e}),className:W.wrapperInner,children:f})})}))}))}));R.muiSupportAuto=!0;var C=R,S=n(64680),E=n(64861),M=n(49299);function A(e){return(0,g.Z)("MuiAccordion",e)}var N=(0,f.Z)("MuiAccordion",["root","rounded","expanded","disabled","gutters","region"]);const $=["children","className","defaultExpanded","disabled","disableGutters","expanded","onChange","square","TransitionComponent","TransitionProps"],G=(0,d.ZP)(S.Z,{name:"MuiAccordion",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[{[`& .${N.region}`]:t.region},t.root,!n.square&&t.rounded,!n.disableGutters&&t.gutters]}})((({theme:e})=>{const t={duration:e.transitions.duration.shortest};return{position:"relative",transition:e.transitions.create(["margin"],t),overflowAnchor:"none","&:before":{position:"absolute",left:0,top:-1,right:0,height:1,content:'""',opacity:1,backgroundColor:(e.vars||e).palette.divider,transition:e.transitions.create(["opacity","background-color"],t)},"&:first-of-type":{"&:before":{display:"none"}},[`&.${N.expanded}`]:{"&:before":{opacity:0},"&:first-of-type":{marginTop:0},"&:last-of-type":{marginBottom:0},"& + &":{"&:before":{display:"none"}}},[`&.${N.disabled}`]:{backgroundColor:(e.vars||e).palette.action.disabledBackground}}}),(({theme:e,ownerState:t})=>(0,r.Z)({},!t.square&&{borderRadius:0,"&:first-of-type":{borderTopLeftRadius:(e.vars||e).shape.borderRadius,borderTopRightRadius:(e.vars||e).shape.borderRadius},"&:last-of-type":{borderBottomLeftRadius:(e.vars||e).shape.borderRadius,borderBottomRightRadius:(e.vars||e).shape.borderRadius,"@supports (-ms-ime-align: auto)":{borderBottomLeftRadius:0,borderBottomRightRadius:0}}},!t.disableGutters&&{[`&.${N.expanded}`]:{margin:"16px 0"}})));var k=i.forwardRef((function(e,t){const n=(0,l.Z)({props:e,name:"MuiAccordion"}),{children:d,className:c,defaultExpanded:u=!1,disabled:p=!1,disableGutters:m=!1,expanded:h,onChange:f,square:g=!1,TransitionComponent:x=C,TransitionProps:Z}=n,v=(0,o.Z)(n,$),[y,w]=(0,M.Z)({controlled:h,default:u,name:"Accordion",state:"expanded"}),R=i.useCallback((e=>{w(!y),f&&f(e,!y)}),[y,f,w]),[S,...N]=i.Children.toArray(d),k=i.useMemo((()=>({expanded:y,disabled:p,disableGutters:m,toggle:R})),[y,p,m,R]),I=(0,r.Z)({},n,{square:g,disabled:p,disableGutters:m,expanded:y}),j=(e=>{const{classes:t,square:n,expanded:o,disabled:r,disableGutters:i}=e,a={root:["root",!n&&"rounded",o&&"expanded",r&&"disabled",!i&&"gutters"],region:["region"]};return(0,s.Z)(a,A,t)})(I);return(0,b.jsxs)(G,(0,r.Z)({className:(0,a.Z)(j.root,c),ref:t,ownerState:I,square:g},v,{children:[(0,b.jsx)(E.Z.Provider,{value:k,children:S}),(0,b.jsx)(x,(0,r.Z)({in:y,timeout:"auto"},Z,{children:(0,b.jsx)("div",{"aria-labelledby":S.props.id,id:S.props["aria-controls"],role:"region",className:j.region,children:N})}))]}))}))},64861:function(e,t,n){const o=n(67294).createContext({});t.Z=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,