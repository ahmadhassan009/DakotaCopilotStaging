"use strict";(self.webpackChunkcrm_integration=self.webpackChunkcrm_integration||[]).push([[830],{1079:function(e,t,r){r.d(t,{Z:function(){return S}});var s=r(63366),n=r(87462),a=r(67294),i=r(86010),o=r(94780),u=r(98216),l=r(61974),c=r(16122),d=r(13511),f=r(51705),y=r(2658),m=r(1588),h=r(34867);function v(e){return(0,h.Z)("MuiLink",e)}var p=(0,m.Z)("MuiLink",["root","underlineNone","underlineHover","underlineAlways","button","focusVisible"]),g=r(54844),b=r(41796);const V={primary:"primary.main",textPrimary:"text.primary",secondary:"secondary.main",textSecondary:"text.secondary",error:"error.main"};var A=({theme:e,ownerState:t})=>{const r=(e=>V[e]||e)(t.color),s=(0,g.DW)(e,`palette.${r}`,!1)||t.color,n=(0,g.DW)(e,`palette.${r}Channel`);return"vars"in e&&n?`rgba(${n} / 0.4)`:(0,b.Fq)(s,.4)},_=r(85893);const w=["className","color","component","onBlur","onFocus","TypographyClasses","underline","variant","sx"],F=(0,l.ZP)(y.Z,{name:"MuiLink",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:r}=e;return[t.root,t[`underline${(0,u.Z)(r.underline)}`],"button"===r.component&&t.button]}})((({theme:e,ownerState:t})=>(0,n.Z)({},"none"===t.underline&&{textDecoration:"none"},"hover"===t.underline&&{textDecoration:"none","&:hover":{textDecoration:"underline"}},"always"===t.underline&&(0,n.Z)({textDecoration:"underline"},"inherit"!==t.color&&{textDecorationColor:A({theme:e,ownerState:t})},{"&:hover":{textDecorationColor:"inherit"}}),"button"===t.component&&{position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none","&::-moz-focus-inner":{borderStyle:"none"},[`&.${p.focusVisible}`]:{outline:"auto"}})));var S=a.forwardRef((function(e,t){const r=(0,c.Z)({props:e,name:"MuiLink"}),{className:l,color:y="primary",component:m="a",onBlur:h,onFocus:p,TypographyClasses:g,underline:b="always",variant:A="inherit",sx:S}=r,x=(0,s.Z)(r,w),{isFocusVisibleRef:k,onBlur:D,onFocus:C,ref:O}=(0,d.Z)(),[T,L]=a.useState(!1),B=(0,f.Z)(t,O),E=(0,n.Z)({},r,{color:y,component:m,focusVisible:T,underline:b,variant:A}),U=(e=>{const{classes:t,component:r,focusVisible:s,underline:n}=e,a={root:["root",`underline${(0,u.Z)(n)}`,"button"===r&&"button",s&&"focusVisible"]};return(0,o.Z)(a,v,t)})(E);return(0,_.jsx)(F,(0,n.Z)({color:y,className:(0,i.Z)(U.root,l),classes:g,component:m,onBlur:e=>{D(e),!1===k.current&&L(!1),h&&h(e)},onFocus:e=>{C(e),!0===k.current&&L(!0),p&&p(e)},ref:B,ownerState:E,variant:A,sx:[...Object.keys(V).includes(y)?[]:[{color:y}],...Array.isArray(S)?S:[S]]},x))}))},87536:function(e,t,r){r.d(t,{cI:function(){return pe}});var s=r(67294),n=e=>"checkbox"===e.type,a=e=>e instanceof Date,i=e=>null==e;const o=e=>"object"==typeof e;var u=e=>!i(e)&&!Array.isArray(e)&&o(e)&&!a(e),l=e=>u(e)&&e.target?n(e.target)?e.target.checked:e.target.value:e,c=(e,t)=>e.has((e=>e.substring(0,e.search(/\.\d+(\.|$)/))||e)(t)),d=e=>Array.isArray(e)?e.filter(Boolean):[],f=e=>void 0===e,y=(e,t,r)=>{if(!t||!u(e))return r;const s=d(t.split(/[,[\].]+?/)).reduce(((e,t)=>i(e)?e:e[t]),e);return f(s)||s===e?f(e[t])?r:e[t]:s};const m={BLUR:"blur",FOCUS_OUT:"focusout",CHANGE:"change"},h={onBlur:"onBlur",onChange:"onChange",onSubmit:"onSubmit",onTouched:"onTouched",all:"all"},v="pattern",p="required";s.createContext(null);var g=(e,t,r,s=!0)=>{const n={defaultValues:t._defaultValues};for(const a in e)Object.defineProperty(n,a,{get:()=>{const n=a;return t._proxyFormState[n]!==h.all&&(t._proxyFormState[n]=!s||h.all),r&&(r[n]=!0),e[n]}});return n},b=e=>u(e)&&!Object.keys(e).length,V=(e,t,r,s)=>{r(e);const{name:n,...a}=e;return b(a)||Object.keys(a).length>=Object.keys(t).length||Object.keys(a).find((e=>t[e]===(!s||h.all)))},A=e=>Array.isArray(e)?e:[e];var _=e=>"string"==typeof e,w=(e,t,r,s,n)=>_(e)?(s&&t.watch.add(e),y(r,e,n)):Array.isArray(e)?e.map((e=>(s&&t.watch.add(e),y(r,e)))):(s&&(t.watchAll=!0),r),F=e=>{const t=e.constructor&&e.constructor.prototype;return u(t)&&t.hasOwnProperty("isPrototypeOf")},S="undefined"!=typeof window&&void 0!==window.HTMLElement&&"undefined"!=typeof document;function x(e){let t;const r=Array.isArray(e);if(e instanceof Date)t=new Date(e);else if(e instanceof Set)t=new Set(e);else{if(S&&(e instanceof Blob||e instanceof FileList)||!r&&!u(e))return e;if(t=r?[]:{},Array.isArray(e)||F(e))for(const r in e)t[r]=x(e[r]);else t=e}return t}var k=(e,t,r,s,n)=>t?{...r[e],types:{...r[e]&&r[e].types?r[e].types:{},[s]:n||!0}}:{},D=e=>/^\w*$/.test(e),C=e=>d(e.replace(/["|']|\]/g,"").split(/\.|\[/));function O(e,t,r){let s=-1;const n=D(t)?[t]:C(t),a=n.length,i=a-1;for(;++s<a;){const t=n[s];let a=r;if(s!==i){const r=e[t];a=u(r)||Array.isArray(r)?r:isNaN(+n[s+1])?{}:[]}e[t]=a,e=e[t]}return e}const T=(e,t,r)=>{for(const s of r||Object.keys(e)){const r=y(e,s);if(r){const{_f:e,...s}=r;if(e&&t(e.name)){if(e.ref.focus){e.ref.focus();break}if(e.refs&&e.refs[0].focus){e.refs[0].focus();break}}else u(s)&&T(s,t)}}};var L=e=>({isOnSubmit:!e||e===h.onSubmit,isOnBlur:e===h.onBlur,isOnChange:e===h.onChange,isOnAll:e===h.all,isOnTouch:e===h.onTouched}),B=(e,t,r)=>!r&&(t.watchAll||t.watch.has(e)||[...t.watch].some((t=>e.startsWith(t)&&/^\.\w+/.test(e.slice(t.length))))),E=(e,t,r)=>{const s=d(y(e,r));return O(s,"root",t[r]),O(e,r,s),e},U=e=>"boolean"==typeof e,N=e=>"file"===e.type,M=e=>"function"==typeof e,j=e=>{if(!S)return!1;const t=e?e.ownerDocument:0;return e instanceof(t&&t.defaultView?t.defaultView.HTMLElement:HTMLElement)},Z=e=>_(e),R=e=>"radio"===e.type,$=e=>e instanceof RegExp;const q={value:!1,isValid:!1},H={value:!0,isValid:!0};var P=e=>{if(Array.isArray(e)){if(e.length>1){const t=e.filter((e=>e&&e.checked&&!e.disabled)).map((e=>e.value));return{value:t,isValid:!!t.length}}return e[0].checked&&!e[0].disabled?e[0].attributes&&!f(e[0].attributes.value)?f(e[0].value)||""===e[0].value?H:{value:e[0].value,isValid:!0}:H:q}return q};const W={isValid:!1,value:null};var I=e=>Array.isArray(e)?e.reduce(((e,t)=>t&&t.checked&&!t.disabled?{isValid:!0,value:t.value}:e),W):W;function z(e,t,r="validate"){if(Z(e)||Array.isArray(e)&&e.every(Z)||U(e)&&!e)return{type:r,message:Z(e)?e:"",ref:t}}var G=e=>u(e)&&!$(e)?e:{value:e,message:""},J=async(e,t,r,s,a)=>{const{ref:o,refs:l,required:c,maxLength:d,minLength:m,min:h,max:g,pattern:V,validate:A,name:w,valueAsNumber:F,mount:S,disabled:x}=e._f,D=y(t,w);if(!S||x)return{};const C=l?l[0]:o,O=e=>{s&&C.reportValidity&&(C.setCustomValidity(U(e)?"":e||""),C.reportValidity())},T={},L=R(o),B=n(o),E=L||B,q=(F||N(o))&&f(o.value)&&f(D)||j(o)&&""===o.value||""===D||Array.isArray(D)&&!D.length,H=k.bind(null,w,r,T),W=(e,t,r,s="maxLength",n="minLength")=>{const a=e?t:r;T[w]={type:e?s:n,message:a,ref:o,...H(e?s:n,a)}};if(a?!Array.isArray(D)||!D.length:c&&(!E&&(q||i(D))||U(D)&&!D||B&&!P(l).isValid||L&&!I(l).isValid)){const{value:e,message:t}=Z(c)?{value:!!c,message:c}:G(c);if(e&&(T[w]={type:p,message:t,ref:C,...H(p,t)},!r))return O(t),T}if(!(q||i(h)&&i(g))){let e,t;const s=G(g),n=G(h);if(i(D)||isNaN(D)){const r=o.valueAsDate||new Date(D),a=e=>new Date((new Date).toDateString()+" "+e),i="time"==o.type,u="week"==o.type;_(s.value)&&D&&(e=i?a(D)>a(s.value):u?D>s.value:r>new Date(s.value)),_(n.value)&&D&&(t=i?a(D)<a(n.value):u?D<n.value:r<new Date(n.value))}else{const r=o.valueAsNumber||(D?+D:D);i(s.value)||(e=r>s.value),i(n.value)||(t=r<n.value)}if((e||t)&&(W(!!e,s.message,n.message,"max","min"),!r))return O(T[w].message),T}if((d||m)&&!q&&(_(D)||a&&Array.isArray(D))){const e=G(d),t=G(m),s=!i(e.value)&&D.length>e.value,n=!i(t.value)&&D.length<t.value;if((s||n)&&(W(s,e.message,t.message),!r))return O(T[w].message),T}if(V&&!q&&_(D)){const{value:e,message:t}=G(V);if($(e)&&!D.match(e)&&(T[w]={type:v,message:t,ref:o,...H(v,t)},!r))return O(t),T}if(A)if(M(A)){const e=z(await A(D,t),C);if(e&&(T[w]={...e,...H("validate",e.message)},!r))return O(e.message),T}else if(u(A)){let e={};for(const s in A){if(!b(e)&&!r)break;const n=z(await A[s](D,t),C,s);n&&(e={...n,...H(s,n.message)},O(n.message),r&&(T[w]=e))}if(!b(e)&&(T[w]={ref:C,...e},!r))return T}return O(!0),T};function K(e,t){const r=Array.isArray(t)?t:D(t)?[t]:C(t),s=1===r.length?e:function(e,t){const r=t.slice(0,-1).length;let s=0;for(;s<r;)e=f(e)?s++:e[t[s++]];return e}(e,r),n=r.length-1,a=r[n];return s&&delete s[a],0!==n&&(u(s)&&b(s)||Array.isArray(s)&&function(e){for(const t in e)if(!f(e[t]))return!1;return!0}(s))&&K(e,r.slice(0,-1)),e}function Q(){let e=[];return{get observers(){return e},next:t=>{let r=0;const s=e.length;for(;r<s;)e[r].next(t),++r},subscribe:t=>(e.push(t),{unsubscribe:()=>{e=e.filter((e=>e!==t))}}),unsubscribe:()=>{e=[]}}}var X=e=>i(e)||!o(e);function Y(e,t){if(X(e)||X(t))return e===t;if(a(e)&&a(t))return e.getTime()===t.getTime();const r=Object.keys(e),s=Object.keys(t);if(r.length!==s.length)return!1;for(const n of r){const r=e[n];if(!s.includes(n))return!1;if("ref"!==n){const e=t[n];if(a(r)&&a(e)||u(r)&&u(e)||Array.isArray(r)&&Array.isArray(e)?!Y(r,e):r!==e)return!1}}return!0}var ee=e=>"select-multiple"===e.type,te=e=>R(e)||n(e),re=e=>j(e)&&e.isConnected,se=e=>{for(const t in e)if(M(e[t]))return!0;return!1};function ne(e,t={}){const r=Array.isArray(e);if(u(e)||r)for(const r in e)Array.isArray(e[r])||u(e[r])&&!se(e[r])?(t[r]=Array.isArray(e[r])?[]:{},ne(e[r],t[r])):i(e[r])||(t[r]=!0);return t}function ae(e,t,r){const s=Array.isArray(e);if(u(e)||s)for(const s in e)Array.isArray(e[s])||u(e[s])&&!se(e[s])?f(t)||X(r[s])?r[s]=Array.isArray(e[s])?ne(e[s],[]):{...ne(e[s])}:ae(e[s],i(t)?{}:t[s],r[s]):r[s]=!Y(e[s],t[s]);return r}var ie=(e,t)=>ae(e,t,ne(t)),oe=(e,{valueAsNumber:t,valueAsDate:r,setValueAs:s})=>f(e)?e:t?""===e?NaN:e?+e:e:r&&_(e)?new Date(e):s?s(e):e;function ue(e){const t=e.ref;if(!(e.refs?e.refs.every((e=>e.disabled)):t.disabled))return N(t)?t.files:R(t)?I(e.refs).value:ee(t)?[...t.selectedOptions].map((({value:e})=>e)):n(t)?P(e.refs).value:oe(f(t.value)?e.ref.value:t.value,e)}var le=(e,t,r,s)=>{const n={};for(const r of e){const e=y(t,r);e&&O(n,r,e._f)}return{criteriaMode:r,names:[...e],fields:n,shouldUseNativeValidation:s}},ce=e=>f(e)?e:$(e)?e.source:u(e)?$(e.value)?e.value.source:e.value:e,de=e=>e.mount&&(e.required||e.min||e.max||e.maxLength||e.minLength||e.pattern||e.validate);function fe(e,t,r){const s=y(e,r);if(s||D(r))return{error:s,name:r};const n=r.split(".");for(;n.length;){const s=n.join("."),a=y(t,s),i=y(e,s);if(a&&!Array.isArray(a)&&r!==s)return{name:r};if(i&&i.type)return{name:s,error:i};n.pop()}return{name:r}}var ye=(e,t,r,s,n)=>!n.isOnAll&&(!r&&n.isOnTouch?!(t||e):(r?s.isOnBlur:n.isOnBlur)?!e:!(r?s.isOnChange:n.isOnChange)||e),me=(e,t)=>!d(y(e,t)).length&&K(e,t);const he={mode:h.onSubmit,reValidateMode:h.onChange,shouldFocusError:!0};function ve(e={},t){let r,s={...he,...e},o={submitCount:0,isDirty:!1,isLoading:!0,isValidating:!1,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,touchedFields:{},dirtyFields:{},errors:{}},v={},p=(u(s.defaultValues)||u(s.values))&&x(s.defaultValues||s.values)||{},g=s.shouldUnregister?{}:x(p),V={action:!1,mount:!1,watch:!1},F={mount:new Set,unMount:new Set,array:new Set,watch:new Set},k=0;const D=e.resetOptions&&e.resetOptions.keepDirtyValues,C={isDirty:!1,dirtyFields:!1,touchedFields:!1,isValidating:!1,isValid:!1,errors:!1},Z={values:Q(),array:Q(),state:Q()},R=L(s.mode),$=L(s.reValidateMode),q=s.criteriaMode===h.all,H=async e=>{if(C.isValid||e){const e=s.resolver?b((await z()).errors):await G(v,!0);e!==o.isValid&&Z.state.next({isValid:e})}},P=e=>C.isValidating&&Z.state.next({isValidating:e}),W=(e,t,r,s)=>{const n=y(v,e);if(n){const a=y(g,e,f(r)?y(p,e):r);f(a)||s&&s.defaultChecked||t?O(g,e,t?a:ue(n._f)):ae(e,a),V.mount&&H()}},I=(e,t,r,s,n)=>{let a=!1,i=!1;const u={name:e};if(!r||s){C.isDirty&&(i=o.isDirty,o.isDirty=u.isDirty=se(),a=i!==u.isDirty);const r=Y(y(p,e),t);i=y(o.dirtyFields,e),r?K(o.dirtyFields,e):O(o.dirtyFields,e,!0),u.dirtyFields=o.dirtyFields,a=a||C.dirtyFields&&i!==!r}if(r){const t=y(o.touchedFields,e);t||(O(o.touchedFields,e,r),u.touchedFields=o.touchedFields,a=a||C.touchedFields&&t!==r)}return a&&n&&Z.state.next(u),a?u:{}},z=async e=>await s.resolver(g,s.context,le(e||F.mount,v,s.criteriaMode,s.shouldUseNativeValidation)),G=async(e,t,r={valid:!0})=>{for(const n in e){const a=e[n];if(a){const{_f:e,...n}=a;if(e){const n=F.array.has(e.name),i=await J(a,g,q,s.shouldUseNativeValidation,n);if(i[e.name]&&(r.valid=!1,t))break;!t&&(y(i,e.name)?n?E(o.errors,i,e.name):O(o.errors,e.name,i[e.name]):K(o.errors,e.name))}n&&await G(n,t,r)}}return r.valid},se=(e,t)=>(e&&t&&O(g,e,t),!Y(Ve(),p)),ne=(e,t,r)=>w(e,F,{...V.mount?g:f(t)?p:_(e)?{[e]:t}:t},r,t),ae=(e,t,r={})=>{const s=y(v,e);let a=t;if(s){const r=s._f;r&&(!r.disabled&&O(g,e,oe(t,r)),a=j(r.ref)&&i(t)?"":t,ee(r.ref)?[...r.ref.options].forEach((e=>e.selected=a.includes(e.value))):r.refs?n(r.ref)?r.refs.length>1?r.refs.forEach((e=>(!e.defaultChecked||!e.disabled)&&(e.checked=Array.isArray(a)?!!a.find((t=>t===e.value)):a===e.value))):r.refs[0]&&(r.refs[0].checked=!!a):r.refs.forEach((e=>e.checked=e.value===a)):N(r.ref)?r.ref.value="":(r.ref.value=a,r.ref.type||Z.values.next({name:e,values:{...g}})))}(r.shouldDirty||r.shouldTouch)&&I(e,a,r.shouldTouch,r.shouldDirty,!0),r.shouldValidate&&be(e)},ve=(e,t,r)=>{for(const s in t){const n=t[s],i=`${e}.${s}`,o=y(v,i);!F.array.has(e)&&X(n)&&(!o||o._f)||a(n)?ae(i,n,r):ve(i,n,r)}},pe=(e,r,s={})=>{const n=y(v,e),a=F.array.has(e),u=x(r);O(g,e,u),a?(Z.array.next({name:e,values:{...g}}),(C.isDirty||C.dirtyFields)&&s.shouldDirty&&Z.state.next({name:e,dirtyFields:ie(p,g),isDirty:se(e,u)})):!n||n._f||i(u)?ae(e,u,s):ve(e,u,s),B(e,F)&&Z.state.next({...o}),Z.values.next({name:e,values:{...g}}),!V.mount&&t()},ge=async t=>{const n=t.target;let a=n.name;const i=y(v,a);if(i){let u,c;const d=n.type?ue(i._f):l(t),f=t.type===m.BLUR||t.type===m.FOCUS_OUT,h=!de(i._f)&&!s.resolver&&!y(o.errors,a)&&!i._f.deps||ye(f,y(o.touchedFields,a),o.isSubmitted,$,R),p=B(a,F,f);O(g,a,d),f?(i._f.onBlur&&i._f.onBlur(t),r&&r(0)):i._f.onChange&&i._f.onChange(t);const V=I(a,d,f,!1),A=!b(V)||p;if(!f&&Z.values.next({name:a,type:t.type,values:{...g}}),h)return C.isValid&&H(),A&&Z.state.next({name:a,...p?{}:V});if(!f&&p&&Z.state.next({...o}),P(!0),s.resolver){const{errors:e}=await z([a]),t=fe(o.errors,v,a),r=fe(e,v,t.name||a);u=r.error,a=r.name,c=b(e)}else u=(await J(i,g,q,s.shouldUseNativeValidation))[a],u?c=!1:C.isValid&&(c=await G(v,!0));i._f.deps&&be(i._f.deps),((t,s,n,a)=>{const i=y(o.errors,t),u=C.isValid&&U(s)&&o.isValid!==s;var l;if(e.delayError&&n?(l=()=>((e,t)=>{O(o.errors,e,t),Z.state.next({errors:o.errors})})(t,n),r=e=>{clearTimeout(k),k=setTimeout(l,e)},r(e.delayError)):(clearTimeout(k),r=null,n?O(o.errors,t,n):K(o.errors,t)),(n?!Y(i,n):i)||!b(a)||u){const e={...a,...u&&U(s)?{isValid:s}:{},errors:o.errors,name:t};o={...o,...e},Z.state.next(e)}P(!1)})(a,c,u,V)}},be=async(e,t={})=>{let r,n;const a=A(e);if(P(!0),s.resolver){const t=await(async e=>{const{errors:t}=await z();if(e)for(const r of e){const e=y(t,r);e?O(o.errors,r,e):K(o.errors,r)}else o.errors=t;return t})(f(e)?e:a);r=b(t),n=e?!a.some((e=>y(t,e))):r}else e?(n=(await Promise.all(a.map((async e=>{const t=y(v,e);return await G(t&&t._f?{[e]:t}:t)})))).every(Boolean),(n||o.isValid)&&H()):n=r=await G(v);return Z.state.next({...!_(e)||C.isValid&&r!==o.isValid?{}:{name:e},...s.resolver||!e?{isValid:r}:{},errors:o.errors,isValidating:!1}),t.shouldFocus&&!n&&T(v,(e=>e&&y(o.errors,e)),e?a:F.mount),n},Ve=e=>{const t={...p,...V.mount?g:{}};return f(e)?t:_(e)?y(t,e):e.map((e=>y(t,e)))},Ae=(e,t)=>({invalid:!!y((t||o).errors,e),isDirty:!!y((t||o).dirtyFields,e),isTouched:!!y((t||o).touchedFields,e),error:y((t||o).errors,e)}),_e=(e,t={})=>{for(const r of e?A(e):F.mount)F.mount.delete(r),F.array.delete(r),y(v,r)&&(t.keepValue||(K(v,r),K(g,r)),!t.keepError&&K(o.errors,r),!t.keepDirty&&K(o.dirtyFields,r),!t.keepTouched&&K(o.touchedFields,r),!s.shouldUnregister&&!t.keepDefaultValue&&K(p,r));Z.values.next({values:{...g}}),Z.state.next({...o,...t.keepDirty?{isDirty:se()}:{}}),!t.keepIsValid&&H()},we=(e,t={})=>{let r=y(v,e);const n=U(t.disabled);return O(v,e,{...r||{},_f:{...r&&r._f?r._f:{ref:{name:e}},name:e,mount:!0,...t}}),F.mount.add(e),r?n&&O(g,e,t.disabled?void 0:y(g,e,ue(r._f))):W(e,!0,t.value),{...n?{disabled:t.disabled}:{},...s.shouldUseNativeValidation?{required:!!t.required,min:ce(t.min),max:ce(t.max),minLength:ce(t.minLength),maxLength:ce(t.maxLength),pattern:ce(t.pattern)}:{},name:e,onChange:ge,onBlur:ge,ref:n=>{if(n){we(e,t),r=y(v,e);const s=f(n.value)&&n.querySelectorAll&&n.querySelectorAll("input,select,textarea")[0]||n,a=te(s),i=r._f.refs||[];if(a?i.find((e=>e===s)):s===r._f.ref)return;O(v,e,{_f:{...r._f,...a?{refs:[...i.filter(re),s,...Array.isArray(y(p,e))?[{}]:[]],ref:{type:s.type,name:e}}:{ref:s}}}),W(e,!1,void 0,s)}else r=y(v,e,{}),r._f&&(r._f.mount=!1),(s.shouldUnregister||t.shouldUnregister)&&(!c(F.array,e)||!V.action)&&F.unMount.add(e)}}},Fe=()=>s.shouldFocusError&&T(v,(e=>e&&y(o.errors,e)),F.mount),Se=(r,s={})=>{const n=r||p,a=x(n),i=r&&!b(r)?a:p;if(s.keepDefaultValues||(p=n),!s.keepValues){if(s.keepDirtyValues||D)for(const e of F.mount)y(o.dirtyFields,e)?O(i,e,y(g,e)):pe(e,y(i,e));else{if(S&&f(r))for(const e of F.mount){const t=y(v,e);if(t&&t._f){const e=Array.isArray(t._f.refs)?t._f.refs[0]:t._f.ref;if(j(e)){const t=e.closest("form");if(t){t.reset();break}}}}v={}}g=e.shouldUnregister?s.keepDefaultValues?x(p):{}:a,Z.array.next({values:i}),Z.values.next({values:i})}F={mount:new Set,unMount:new Set,array:new Set,watch:new Set,watchAll:!1,focus:""},!V.mount&&t(),V.mount=!C.isValid||!!s.keepIsValid,V.watch=!!e.shouldUnregister,Z.state.next({submitCount:s.keepSubmitCount?o.submitCount:0,isDirty:s.keepDirty?o.isDirty:!(!s.keepDefaultValues||Y(r,p)),isSubmitted:!!s.keepIsSubmitted&&o.isSubmitted,dirtyFields:s.keepDirtyValues?o.dirtyFields:s.keepDefaultValues&&r?ie(p,r):{},touchedFields:s.keepTouched?o.touchedFields:{},errors:s.keepErrors?o.errors:{},isSubmitting:!1,isSubmitSuccessful:!1})},xe=(e,t)=>Se(M(e)?e(g):e,t);return M(s.defaultValues)&&s.defaultValues().then((e=>{xe(e,s.resetOptions),Z.state.next({isLoading:!1})})),{control:{register:we,unregister:_e,getFieldState:Ae,_executeSchema:z,_getWatch:ne,_getDirty:se,_updateValid:H,_removeUnmounted:()=>{for(const e of F.unMount){const t=y(v,e);t&&(t._f.refs?t._f.refs.every((e=>!re(e))):!re(t._f.ref))&&_e(e)}F.unMount=new Set},_updateFieldArray:(e,t=[],r,s,n=!0,a=!0)=>{if(s&&r){if(V.action=!0,a&&Array.isArray(y(v,e))){const t=r(y(v,e),s.argA,s.argB);n&&O(v,e,t)}if(a&&Array.isArray(y(o.errors,e))){const t=r(y(o.errors,e),s.argA,s.argB);n&&O(o.errors,e,t),me(o.errors,e)}if(C.touchedFields&&a&&Array.isArray(y(o.touchedFields,e))){const t=r(y(o.touchedFields,e),s.argA,s.argB);n&&O(o.touchedFields,e,t)}C.dirtyFields&&(o.dirtyFields=ie(p,g)),Z.state.next({name:e,isDirty:se(e,t),dirtyFields:o.dirtyFields,errors:o.errors,isValid:o.isValid})}else O(g,e,t)},_getFieldArray:t=>d(y(V.mount?g:p,t,e.shouldUnregister?y(p,t,[]):[])),_reset:Se,_updateFormState:e=>{o={...o,...e}},_subjects:Z,_proxyFormState:C,get _fields(){return v},get _formValues(){return g},get _stateFlags(){return V},set _stateFlags(e){V=e},get _defaultValues(){return p},get _names(){return F},set _names(e){F=e},get _formState(){return o},set _formState(e){o=e},get _options(){return s},set _options(e){s={...s,...e}}},trigger:be,register:we,handleSubmit:(e,t)=>async r=>{r&&(r.preventDefault&&r.preventDefault(),r.persist&&r.persist());let n=x(g);if(Z.state.next({isSubmitting:!0}),s.resolver){const{errors:e,values:t}=await z();o.errors=e,n=t}else await G(v);K(o.errors,"root"),b(o.errors)?(Z.state.next({errors:{}}),await e(n,r)):(t&&await t({...o.errors},r),Fe(),setTimeout(Fe)),Z.state.next({isSubmitted:!0,isSubmitting:!1,isSubmitSuccessful:b(o.errors),submitCount:o.submitCount+1,errors:o.errors})},watch:(e,t)=>M(e)?Z.values.subscribe({next:r=>e(ne(void 0,t),r)}):ne(e,t,!0),setValue:pe,getValues:Ve,reset:xe,resetField:(e,t={})=>{y(v,e)&&(f(t.defaultValue)?pe(e,y(p,e)):(pe(e,t.defaultValue),O(p,e,t.defaultValue)),t.keepTouched||K(o.touchedFields,e),t.keepDirty||(K(o.dirtyFields,e),o.isDirty=t.defaultValue?se(e,y(p,e)):se()),t.keepError||(K(o.errors,e),C.isValid&&H()),Z.state.next({...o}))},clearErrors:e=>{e&&A(e).forEach((e=>K(o.errors,e))),Z.state.next({errors:e?o.errors:{}})},unregister:_e,setError:(e,t,r)=>{const s=(y(v,e,{_f:{}})._f||{}).ref;O(o.errors,e,{...t,ref:s}),Z.state.next({name:e,errors:o.errors,isValid:!1}),r&&r.shouldFocus&&s&&s.focus&&s.focus()},setFocus:(e,t={})=>{const r=y(v,e),s=r&&r._f;if(s){const e=s.refs?s.refs[0]:s.ref;e.focus&&(e.focus(),t.shouldSelect&&e.select())}},getFieldState:Ae}}function pe(e={}){const t=s.useRef(),[r,n]=s.useState({isDirty:!1,isValidating:!1,isLoading:!0,isSubmitted:!1,isSubmitting:!1,isSubmitSuccessful:!1,isValid:!1,submitCount:0,dirtyFields:{},touchedFields:{},errors:{},defaultValues:M(e.defaultValues)?void 0:e.defaultValues});t.current||(t.current={...ve(e,(()=>n((e=>({...e}))))),formState:r});const a=t.current.control;return a._options=e,function(e){const t=s.useRef(e);t.current=e,s.useEffect((()=>{const r=!e.disabled&&t.current.subject.subscribe({next:t.current.next});return()=>{r&&r.unsubscribe()}}),[e.disabled])}({subject:a._subjects.state,next:e=>{V(e,a._proxyFormState,a._updateFormState,!0)&&n({...a._formState})}}),s.useEffect((()=>{e.values&&!Y(e.values,a._defaultValues)&&a._reset(e.values,a._options.resetOptions)}),[e.values,a]),s.useEffect((()=>{a._stateFlags.mount||(a._updateValid(),a._stateFlags.mount=!0),a._stateFlags.watch&&(a._stateFlags.watch=!1,a._subjects.state.next({...a._formState})),a._removeUnmounted()})),t.current.formState=g(r,a),t.current}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,