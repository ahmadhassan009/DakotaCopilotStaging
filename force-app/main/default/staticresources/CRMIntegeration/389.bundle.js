"use strict";(self.webpackChunkcrm_integration=self.webpackChunkcrm_integration||[]).push([[389],{74721:function(e,t,n){var a=n(64836);t.Z=void 0;var c=a(n(61268)),s=n(85893),o=(0,c.default)((0,s.jsx)("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"}),"Info");t.Z=o},59994:function(e,t,n){var a=n(64836);t.Z=void 0;var c=a(n(61268)),s=n(85893),o=(0,c.default)((0,s.jsx)("path",{d:"M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"}),"Replay");t.Z=o},14922:function(e,t,n){var a=n(87537),c=n.n(a),s=n(23645),o=n.n(s)()(c());o.push([e.id,".records-crm-table-top-container .page-no-container{display:flex;margin-right:10px;justify-content:flex-end}","",{version:3,sources:["webpack://./src/app/features/logs/components/logs-inventory-table/LogsInventoryTable.scss"],names:[],mappings:"AAEI,oDACI,YAAA,CACA,iBAAA,CACA,wBAAA",sourcesContent:[".records-crm-table-top-container{\r\n    \r\n    .page-no-container{\r\n        display: flex;\r\n        margin-right: 10px;\r\n        justify-content: flex-end;\r\n\r\n    } \r\n}"],sourceRoot:""}]),t.Z=o},85578:function(e,t,n){var a=n(87537),c=n.n(a),s=n(23645),o=n.n(s)()(c());o.push([e.id,".records-crm-table-top-container .page-no-container{display:flex;margin-right:10px;justify-content:flex-end}","",{version:3,sources:["webpack://./src/app/features/logs/components/logs-table/LogsTable.scss"],names:[],mappings:"AAEI,oDACI,YAAA,CACA,iBAAA,CACA,wBAAA",sourcesContent:[".records-crm-table-top-container{\r\n    \r\n    .page-no-container{\r\n        display: flex;\r\n        margin-right: 10px;\r\n        justify-content: flex-end;\r\n\r\n    } \r\n}"],sourceRoot:""}]),t.Z=o},80227:function(e,t,n){n.d(t,{m:function(){return r}});var a=n(85893),c=n(62640),s=n(44656),o=n(34934),i=function(){return i=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var c in t=arguments[n])Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c]);return e},i.apply(this,arguments)};function r(e){var t=e.tabs,n=e.value,r=e.type,l=void 0===r?"default":r,u=e.onChange;return(0,a.jsx)("div",i({className:"".concat("buttons"===l?"buttons":""," tabs-container")},{children:(0,a.jsx)(s.Z,i({className:"tabs",value:n},{children:t.map((function(e){return(0,a.jsxs)("span",i({onClick:function(){return u(e)},className:"tab-container ".concat(n===e.index?"active":"")},{children:[(0,a.jsx)(o.Z,{src:e.logo||""}),(0,a.jsx)(c.Z,{className:"tab",label:e.label})]}))}))}))}))}},58593:function(e,t,n){n.d(t,{UL:function(){return U},Gi:function(){return M},QC:function(){return Y}});var a=n(85893),c=n(67294),s=n(22327),o=n(80227),i=n(1435),r=n(60343),l=n(9687),u=n(85594),d=n(72580),f=n(92790),p=n(42193),m=n(75133),v=n(90506),h=n(30162),g=n(90952),y=n(93379),x=n.n(y),_=n(7795),b=n.n(_),j=n(90569),N=n.n(j),S=n(3565),C=n.n(S),B=n(19216),F=n.n(B),T=n(44589),V=n.n(T),A=n(85578),Z={};Z.styleTagTransform=V(),Z.setAttributes=C(),Z.insert=N().bind(null,"head"),Z.domAPI=b(),Z.insertStyleElement=F(),x()(A.Z,Z),A.Z&&A.Z.locals&&A.Z.locals;var I=n(10762),O=function(){return O=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var c in t=arguments[n])Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c]);return e},O.apply(this,arguments)};function w(e){var t=e.module,n=e.totalRows,o=e.requestBody,l=e.setRequestBody,u=e.sortBy,d=e.setSortBy,p=e.emptyData,y=e.isLoading,x=void 0===y?function(){}:y,_=e.paginationPerPage,b=(0,i.CG)(r.US).logs_per_page,j=(0,c.useState)(b),N=j[0],S=j[1],C="logs",B=(0,s.$)().t,F=(0,i.CG)(r.dy),T=F.id,V=F.timeZone,A=F.additionalSettings,Z=(0,i.CG)(h.fW).statusTypes,w=(0,c.useState)(o.filters.offset),P=w[0],E=w[1],k=(0,i.CG)(g._p),G=(0,c.useState)(Math.ceil(n/b)),z=G[0],D=G[1],L=(0,c.useState)(!1),R=L[0],q=L[1],$=(0,i.TL)(),Y=(0,c.useState)({method:"post",url:"".concat("https://marketplace-as-a-service.herokuapp.com/index.php/api/v1","/dakota"),body:JSON.stringify(o),headers:(0,v.Ry)(T)}),U=Y[0],H=Y[1],J=t===f.VB.account?(0,f.PN)(Z,V,T,null==k?void 0:k.accounts,C):(0,f.FT)(Z,V,T,null==k?void 0:k.contacts,C);(0,i.N7)((function(){H(O(O({},U),{body:JSON.stringify(o),headers:(0,v.Ry)(T)}))}),[o]),(0,i.N7)((function(){l(O(O({},o),{filters:O(O({},o.filters),{fields:t===f.VB.account?f.zd:f.GV,order_by:t===f.VB.account?"".concat((0,f.PN)(Z,V,void 0,null==k?void 0:k.accounts,C)[u.account.columnId-1].sortField,":").concat(u.account.order,",").concat(M):"".concat((0,f.FT)(Z,V,void 0,null==k?void 0:k.contacts,C)[u.contact.columnId-1].sortField,":").concat(u.contact.order,",").concat(M),offset:b*(P-1)})}))}),[P]),(0,i.N7)((function(){l(O(O({},o),{filters:O(O({},o.filters),{fields:t===f.VB.account?f.zd:f.GV,order_by:t===f.VB.account?"".concat((0,f.PN)(Z,V,void 0,null==k?void 0:k.accounts,C)[u.account.columnId-1].sortField,":").concat(u.account.order,",").concat(M):"".concat((0,f.FT)(Z,V,void 0,null==k?void 0:k.contacts,C)[u.contact.columnId-1].sortField,":").concat(u.contact.order,",").concat(M),offset:0})}))}),[u]);var W=(0,c.useCallback)((function(e,n,a){var c;d(O(O({},u),((c={})[t===f.VB.account?f.VB.account:f.VB.contact]={columnId:Number(e.id),order:n},c)))}),[t,d,u]);(0,c.useEffect)((function(){D(Math.ceil(n/b))}),[P,n,b]),(0,c.useEffect)((function(){q(!1),E(1)}),[t,o.filters.filter]);var Q=(0,c.useState)({autoSync:A.autoSync,notifyFieldChanges:A.notifyFieldChanges,receiveTechnicalEmails:A.receiveTechnicalEmails,records_per_page:A.records_per_page,logs_per_page:A.logs_per_page,logs_inventory_per_page:A.logs_inventory_per_page}),X=(Q[0],Q[1]);return(0,i.N7)((function(){_&&_(N),o.filters.max_num=N;var e=A.autoSync,t=A.notifyFieldChanges,n=A.receiveTechnicalEmails,a=A.records_per_page,c=A.logs_inventory_per_page;X((function(e){return O(O({},e),{logs_per_page:N})})),$.saveAdditionalSettings({autoSync:e,notifyFieldChanges:t,receiveTechnicalEmails:n,records_per_page:a,logs_per_page:N,logs_inventory_per_page:c})}),[o.filters.max_num,N]),(0,a.jsx)("div",O({className:"records-crm-table-top-container"},{children:(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(m.P,{tableKey:t,title:"",columns:J,requestData:U,dataPath:"records",loadData:Boolean(T),totalCount:n,defaultSortAsc:t===f.VB.account?"asc"===u.account.order:"asc"===u.contact.order,defaultSortFieldId:t===f.VB.account?u.account.columnId:u.contact.columnId,noRecordFoundMessage:(0,a.jsx)("p",O({style:{marginTop:"20%"}},{children:B("logs.no-record-found",{module:o.module})})),emptyData:p,page:P,onSort:W,setPage:E,isLoading:x,dataFetched:function(e){0===e.length?q(!1):q(!0)},paginationPerPage:function(e){S(e)}}),R&&(0,a.jsx)("div",O({className:"page-no-container"},{children:(0,a.jsx)(I.Z,{page:P,lastPage:z,handlePageNumber:function(e){E(e)}})}))]})}))}var P=n(12036),E=n(21588),k=n(75986),G=n(44807),z=n(84475),D=n(54718),L=n(68097);e=n.hmd(e);var R=function(){return R=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var c in t=arguments[n])Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c]);return e},R.apply(this,arguments)},M="id:ASC",q=function(e){return{filter:[],fields:f.zd,order_by:"sync_status:desc",max_num:e,offset:0}},$=function(e){return{module:"logs",filters:q(e),dc_plan_access_flag:!1}},Y=function(){return[{name:"Last 30 Days",value:"logs"},{name:"Older",value:"logs-inventory"}]};function U(){var t=(0,i.CG)(r.US).logs_per_page,n=(0,c.useState)(t),m=n[0],y=n[1],x=(0,c.useState)(t),_=x[0],b=(x[1],(0,i.CG)(g.xl)),j=(0,s.$)().t,N=(0,i.CG)(r.dy),S=N.id,C=N.timeZone,B=N.status,F=N.client_setup_status,T=(0,i.CG)(h.fW),V=T.status,A=T.statusTypes,Z=(0,i.TL)(),I=(0,c.useState)(!1),O=I[0],q=I[1],U=(0,c.useState)(!1),H=U[0],J=U[1],W=(0,c.useState)(!1),Q=(W[0],W[1]),X=(0,i.CG)(g.OY),K=(0,i.CG)(g._p),ee=(0,c.useState)(Y()[0].value),te=ee[0],ne=ee[1],ae=(0,c.useState)(!1),ce=ae[0],se=ae[1],oe=(0,c.useState)(""),ie=oe[0],re=oe[1],le=(0,i.CG)(g.XI),ue=(0,c.useState)({index:0,label:j("accounts"),value:d.VB.account}),de=ue[0],fe=ue[1],pe=(de.value,d.VB.account,(0,c.useState)(R(R({},$(m)),{client_id:S}))),me=pe[0],ve=pe[1],he=(0,c.useState)({account:f.YM.account,contact:f.YM.contact}),ge=he[0],ye=he[1],xe=(0,c.useState)({account:{},contact:{}}),_e=xe[0],be=xe[1],je=(0,c.useState)({emptyData:"emptyData"}),Ne=je[0],Se=je[1],Ce=[{index:0,label:j("accounts"),value:d.VB.account},{index:1,label:j("contacts"),value:d.VB.contact}];(0,c.useEffect)((function(){var e=function(e){200===e.detail.status?(Z.setToastrState({subtitle:j("logs.reset-log-success"),severity:"success",autoHide:!0}),Se({emptyData:"emptyData"})):Z.setToastrState({subtitle:j("logs.reset-log-failure"),severity:"error",autoHide:!0})};return window.addEventListener("dci-logs-reset-response",e),function(){return window.removeEventListener("dci-logs-reset-response",e)}}),[]),(0,c.useEffect)((function(){ve(R(R({},me),{client_id:S,module:"logs",dc_plan_access_flag:X||!1,filters:R(R({},me.filters),{filter:(0,u.O)({filterFields:(0,p.ZT)({syncStatusOptions:A.map((function(e){return{name:e.label,value:e.label}}))})[de.value||d.VB.account],filter:_e[de.value||d.VB.account],defaultFilters:(0,p.BF)({module:de.label,clientId:S})}),fields:de.value===d.VB.account?f.zd:f.GV,order_by:de.value===d.VB.account?"".concat((0,f.PN)(A,C,void 0,null==K?void 0:K.accounts)[ge.account.columnId-1].sortField,":").concat(ge.account.order,",").concat(M):"".concat((0,f.FT)(A,C,void 0,null==K?void 0:K.contacts)[ge.contact.columnId-1].sortField,":").concat(ge.contact.order,",").concat(M),offset:0})}))}),[Ne]),(0,i.N7)((function(){Se(R({},Ne))}),[de.value,S,_e,A]),(0,c.useEffect)((function(){Q(0===_)}),[_]);var Be=function(){J(!1)};(0,c.useEffect)((function(){se(!1)}),[de.value]),(0,c.useEffect)((function(){y(m)}),[e,d.VB]),(0,c.useEffect)((function(){ve((function(e){return R(R({},e),{filters:R(R({},e.filters),{max_num:m})})}))}),[m]);var Fe=(0,c.useCallback)((function(){return B!==g.n$.INACTIVE}),[B]);(0,c.useEffect)((function(){Fe()?le.includes("#/no-access")||le.includes("/dashboard")||""===le?(0,G.T)("/subscriptions.account"):9==F||le.includes("#/widget")||(0,G.T)("/initial-setup"):(0,G.T)("/no-access");var e=le.split(".");e.length>=0?re(e[0]):re("")}),[le,F,Fe]);var Te=(0,c.useState)(!1),Ve=Te[0],Ae=Te[1],Ze=(0,i.CG)(g.zw),Ie=(0,i.CG)(g.AF);return(0,c.useEffect)((function(){Ae(-1===b||!!Ze)}),[Ie,b,Ze]),(0,a.jsx)(a.Fragment,{children:"loaded"===V&&me.filters.filter.length>0?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(k.Z,{open:H,onClose:Be,onAction:function(){var e;ce||(se(!0),e=S,(0,v.D2)({method:"put",url:"".concat("https://marketplace-as-a-service.herokuapp.com/index.php/api/v1","/logs/resetAll"),path:"",headers:(0,v.Ry)(e),body:{client_id:Number(e),module:de.value===d.VB.account?"Accounts":"Contacts"}}).then((function(e){var t=new CustomEvent("dci-logs-reset-response",{detail:e});window.dispatchEvent(t),se(!1)})),Be())},description:j("logs.retry-dialog-description"),title:j("logs.retry-dialog-title"),type:"retry"}),(0,a.jsxs)("div",R({className:"lock-header-logs"},{children:[(0,a.jsxs)("span",R({className:"top-buttons"},{children:[(0,a.jsx)(o.m,{tabs:Ce,value:de.index,type:"buttons",onChange:fe}),(0,a.jsxs)("div",R({className:"take-to-left"},{children:[(0,a.jsx)("span",{children:(0,a.jsx)("p",R({className:"logs-title"},{children:"Displaying Logs"}))}),(0,a.jsx)("div",R({className:"dropdown-container"},{children:(0,a.jsx)(z.L,{title:"",value:te,options:Y(),onChange:function(e){ne(e),"logs-inventory"===e&&(0,G.T)("#/logs-inventory")}})})),(0,a.jsx)(E.z,{text:j("refresh-button"),onClick:function(){return Se(R({},Ne))},className:"refresh-icon",isDisabled:Ve}),(0,a.jsx)(E.z,{text:j("logs.retry-button-text"),className:"retry-button",onClick:function(){J(!0)},isDisabled:Ve||b<=0})]}))]})),(0,a.jsx)("div",R({className:"records-total flex"},{children:(0,a.jsx)("p",R({className:"title"},{children:"".concat(de.label||d.VB.account," (").concat(-1!==b?b:"...",")")}))}))]})),(0,a.jsxs)("div",R({className:"logs-data-table-container"},{children:[S&&(0,a.jsx)(l.x,{filterFields:Object.values((0,p.ZT)({syncStatusOptions:(0,P.S$)(A.map((function(e){return e.label})))})[de.value||d.VB.account]),filter:_e[de.value||d.VB.account],setFilter:function(e){var t;be(R(R({},_e),((t={})[de.value||d.VB.account]=e,t)))},disableFields:O,isRefresh:Ve},de.value),(0,a.jsx)(w,{module:de.value||d.VB.account,totalRows:b,requestBody:me,setRequestBody:ve,sortBy:ge,setSortBy:ye,emptyData:Ne,isLoading:q,paginationPerPage:function(e){y(e)}})]})),(0,a.jsx)("div",R({className:"lock-header-add-to-crm"},{children:(0,a.jsx)(L.H,{className:["#/initial-setup","#/widget","#/no-access"].includes(ie)?"display-none":""})}))]}):(0,a.jsx)("div",R({className:"spinner-content-area"},{children:(0,a.jsxs)("div",R({className:"spinner"},{children:[" ",(0,a.jsx)(D.Z,{size:"medium",variant:"base",assistiveText:{label:""}})]}))}))})}},16355:function(e,t,n){n.d(t,{dV:function(){return Y}});var a=n(85893),c=n(67294),s=n(22327),o=n(80227),i=n(1435),r=n(60343),l=n(9687),u=n(85594),d=n(72580),f=n(92790),p=n(42193),m=n(75133),v=n(90506),h=n(58593),g=n(30162),y=n(90952),x=n(93379),_=n.n(x),b=n(7795),j=n.n(b),N=n(90569),S=n.n(N),C=n(3565),B=n.n(C),F=n(19216),T=n.n(F),V=n(44589),A=n.n(V),Z=n(14922),I={};I.styleTagTransform=A(),I.setAttributes=B(),I.insert=S().bind(null,"head"),I.domAPI=j(),I.insertStyleElement=T(),_()(Z.Z,I),Z.Z&&Z.Z.locals&&Z.Z.locals;var O=n(10762),w=function(){return w=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var c in t=arguments[n])Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c]);return e},w.apply(this,arguments)};function P(e){var t=e.module,n=e.totalRows,o=e.requestBody,l=e.setRequestBody,u=e.sortBy,d=e.setSortBy,p=e.emptyData,x=e.isLoading,_=void 0===x?function(){}:x,b=e.paginationPerPage,j=(0,i.CG)(r.US).logs_inventory_per_page,N=(0,c.useState)(j),S=N[0],C=N[1],B=(0,s.$)().t,F=(0,i.CG)(r.dy),T=F.id,V=F.timeZone,A=F.additionalSettings,Z=(0,i.CG)(g.fW).statusTypes,I="logs_history",P=(0,i.CG)(y._p),E=(0,c.useState)(Math.ceil(n/j)),k=E[0],G=E[1],z=(0,c.useState)(!1),D=z[0],L=z[1],R=(0,c.useState)(o.filters.offset),M=R[0],q=R[1],$=(0,i.TL)(),Y=(0,c.useState)({method:"post",url:"".concat("https://marketplace-as-a-service.herokuapp.com/index.php/api/v1","/dakota"),body:JSON.stringify(o),headers:(0,v.Ry)(T)}),U=Y[0],H=Y[1],J=t===f.VB.account?(0,f.PN)(Z,V,T,null==P?void 0:P.accounts,I):(0,f.FT)(Z,V,T,null==P?void 0:P.contacts,I);(0,i.N7)((function(){H(w(w({},U),{body:JSON.stringify(o),headers:(0,v.Ry)(T)}))}),[o]),(0,i.N7)((function(){l(w(w({},o),{filters:w(w({},o.filters),{fields:t===f.VB.account?f.zd:f.GV,order_by:t===f.VB.account?"".concat((0,f.PN)(Z,V,void 0,null==P?void 0:P.accounts,I)[u.account.columnId-1].sortField,":").concat(u.account.order,",").concat(h.Gi):"".concat((0,f.FT)(Z,V,void 0,null==P?void 0:P.contacts,I)[u.contact.columnId-1].sortField,":").concat(u.contact.order,",").concat(h.Gi),offset:j*(M-1)})}))}),[M]),(0,i.N7)((function(){l(w(w({},o),{filters:w(w({},o.filters),{fields:t===f.VB.account?f.zd:f.GV,order_by:t===f.VB.account?"".concat((0,f.PN)(Z,V,void 0,null==P?void 0:P.accounts,I)[u.account.columnId-1].sortField,":").concat(u.account.order,",").concat(h.Gi):"".concat((0,f.FT)(Z,V,void 0,null==P?void 0:P.contacts,I)[u.contact.columnId-1].sortField,":").concat(u.contact.order,",").concat(h.Gi),offset:0})}))}),[u]);var W=(0,c.useCallback)((function(e,n,a){var c;d(w(w({},u),((c={})[t===f.VB.account?f.VB.account:f.VB.contact]={columnId:Number(e.id),order:n},c)))}),[t,d,u]);(0,c.useEffect)((function(){G(Math.ceil(n/j))}),[M,n,j]),(0,c.useEffect)((function(){L(!1),q(1)}),[t,o.filters.filter]);var Q=(0,c.useState)({autoSync:A.autoSync,notifyFieldChanges:A.notifyFieldChanges,receiveTechnicalEmails:A.receiveTechnicalEmails,records_per_page:A.records_per_page,logs_per_page:A.logs_per_page,logs_inventory_per_page:A.logs_inventory_per_page}),X=(Q[0],Q[1]);return(0,i.N7)((function(){b&&b(S),o.filters.max_num=S;var e=A.autoSync,t=A.notifyFieldChanges,n=A.receiveTechnicalEmails,a=A.records_per_page,c=A.logs_per_page;X((function(e){return w(w({},e),{logs_inventory_per_page:S})})),$.saveAdditionalSettings({autoSync:e,notifyFieldChanges:t,receiveTechnicalEmails:n,records_per_page:a,logs_per_page:c,logs_inventory_per_page:S})}),[o.filters.max_num,S]),(0,a.jsx)("div",w({className:"records-crm-table-top-container"},{children:(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(m.P,{tableKey:t,title:"",columns:J,requestData:U,dataPath:"records",loadData:Boolean(T),totalCount:n,defaultSortAsc:t===f.VB.account?"asc"===u.account.order:"asc"===u.contact.order,defaultSortFieldId:t===f.VB.account?u.account.columnId:u.contact.columnId,noRecordFoundMessage:(0,a.jsx)("p",w({style:{marginTop:"20%"}},{children:B("logs-inventory.no-record-found",{module:o.module})})),emptyData:p,page:M,onSort:W,setPage:q,isLoading:_,dataFetched:function(e){0===e.length?L(!1):L(!0)},paginationPerPage:function(e){C(e)}}),D&&(0,a.jsx)("div",w({className:"page-no-container"},{children:(0,a.jsx)(O.Z,{page:M,lastPage:k,handlePageNumber:function(e){q(e)}})}))]})}))}var E=n(12036),k=n(84475),G=n(54718),z=n(44807),D=n(68097),L=n(21588);e=n.hmd(e);var R=function(){return R=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var c in t=arguments[n])Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c]);return e},R.apply(this,arguments)},M="id:ASC",q=function(e){return{filter:[],fields:f.zd,order_by:"sync_status:desc",max_num:e,offset:0}},$=function(e){return{module:"logs_history",filters:q(e),dc_plan_access_flag:!1}};function Y(){var t=(0,i.CG)(r.US).logs_inventory_per_page,n=(0,c.useState)(t),m=n[0],v=n[1],x=(0,i.CG)(y.xl),_=(0,s.$)().t,b=(0,i.CG)(r.dy),j=b.id,N=b.timeZone,S=b.status,C=b.client_setup_status,B=(0,i.CG)(g.fW),F=B.status,T=B.statusTypes,V=(0,i.TL)(),A=(0,c.useState)(!1),Z=A[0],I=A[1],O=(0,i.CG)(y.OY),w=(0,i.CG)(y._p),q=(0,c.useState)((0,h.QC)()[1].value),Y=q[0],U=q[1],H=(0,c.useState)(""),J=H[0],W=H[1],Q=(0,i.CG)(y.XI),X=(0,c.useState)({index:0,label:_("accounts"),value:d.VB.account}),K=X[0],ee=X[1],te=(K.value,d.VB.account,(0,c.useState)(R(R({},$(m)),{client_id:j}))),ne=te[0],ae=te[1],ce=(0,c.useState)({account:f.YM.account,contact:f.YM.contact}),se=ce[0],oe=ce[1],ie=(0,c.useState)({account:{},contact:{}}),re=ie[0],le=ie[1],ue=(0,c.useState)({emptyData:"emptyData"}),de=ue[0],fe=ue[1],pe=[{index:0,label:_("accounts"),value:d.VB.account},{index:1,label:_("contacts"),value:d.VB.contact}];(0,c.useEffect)((function(){var e=function(e){200===e.detail.status?(V.setToastrState({subtitle:_("logs.reset-log-success"),severity:"success",autoHide:!0}),fe({emptyData:"emptyData"})):V.setToastrState({subtitle:_("logs.reset-log-failure"),severity:"error",autoHide:!0})};return window.addEventListener("dci-logs-reset-inventory-response",e),function(){return window.removeEventListener("dci-logs-reset-inventory-response",e)}}),[]),(0,c.useEffect)((function(){ae(R(R({},ne),{client_id:j,module:"logs_history",dc_plan_access_flag:O||!1,filters:R(R({},ne.filters),{filter:(0,u.O)({filterFields:(0,p.ZT)({syncStatusOptions:T.map((function(e){return{name:e.label,value:e.label}}))})[K.value||d.VB.account],filter:re[K.value||d.VB.account],defaultFilters:(0,p.BF)({module:K.label,clientId:j})}),fields:K.value===d.VB.account?f.zd:f.GV,order_by:K.value===d.VB.account?"".concat((0,f.PN)(T,N,void 0,null==w?void 0:w.accounts)[se.account.columnId-1].sortField,":").concat(se.account.order,",").concat(M):"".concat((0,f.FT)(T,N,void 0,null==w?void 0:w.contacts)[se.contact.columnId-1].sortField,":").concat(se.contact.order,",").concat(M),offset:0})}))}),[de]),(0,i.N7)((function(){fe(R({},de))}),[K.value,j,re,T]),(0,c.useEffect)((function(){v(m)}),[e,d.VB]),(0,c.useEffect)((function(){ae((function(e){return R(R({},e),{filters:R(R({},e.filters),{max_num:m})})}))}),[m]);var me=(0,c.useCallback)((function(){return S!==y.n$.INACTIVE}),[S]);(0,c.useEffect)((function(){me()?Q.includes("#/no-access")||Q.includes("/dashboard")||""===Q?(0,z.T)("/subscriptions.account"):9==C||Q.includes("#/widget")||(0,z.T)("/initial-setup"):(0,z.T)("/no-access");var e=Q.split(".");e.length>=0?W(e[0]):W("")}),[Q,C,me]);var ve=(0,c.useState)(!1),he=ve[0],ge=ve[1],ye=(0,i.CG)(y.zw),xe=(0,i.CG)(y.AF);return(0,c.useEffect)((function(){ge(-1===x||!!ye)}),[xe,x,ye]),(0,a.jsx)(a.Fragment,{children:"loaded"===F&&ne.filters.filter.length>0?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",R({className:"lock-header-logs"},{children:[(0,a.jsxs)("span",R({className:"top-buttons logs-inventory"},{children:[(0,a.jsx)(o.m,{tabs:pe,value:K.index,type:"buttons",onChange:ee}),(0,a.jsxs)("div",R({className:"take-to-left"},{children:[(0,a.jsx)("span",{children:(0,a.jsx)("p",R({className:"logs-title"},{children:"Displaying Logs"}))}),(0,a.jsx)("div",R({className:"inventory-dropdown-container"},{children:(0,a.jsx)(k.L,{title:"",value:Y,options:(0,h.QC)(),onChange:function(e){U(e),"logs"===e&&(0,z.T)("#/logs")}})})),(0,a.jsx)(L.z,{text:_("refresh-button"),onClick:function(){return fe(R({},de))},className:"refresh-icon-logs-inventory",isDisabled:he})]}))]})),(0,a.jsx)("div",R({className:"records-total flex"},{children:(0,a.jsx)("p",R({className:"title"},{children:"".concat(K.label||d.VB.account," (").concat(-1!==x?x:"...",")")}))}))]})),(0,a.jsxs)("div",R({className:"logs-data-table-container"},{children:[j&&(0,a.jsx)(l.x,{filterFields:Object.values((0,p.ZT)({syncStatusOptions:(0,E.S$)(T.map((function(e){return e.label})))})[K.value||d.VB.account]),filter:re[K.value||d.VB.account],setFilter:function(e){var t;le(R(R({},re),((t={})[K.value||d.VB.account]=e,t)))},disableFields:Z,isRefresh:he},K.value),(0,a.jsx)(P,{module:K.value||d.VB.account,totalRows:x,requestBody:ne,setRequestBody:ae,sortBy:se,setSortBy:oe,emptyData:de,isLoading:I,paginationPerPage:function(e){v(e)}})]}))]}),(0,a.jsx)("div",R({className:"lock-header-add-to-crm"},{children:(0,a.jsx)(D.H,{className:["#/initial-setup","#/widget","#/no-access"].includes(J)?"display-none":""})}))]}):(0,a.jsx)("div",R({className:"spinner-content-area"},{children:(0,a.jsxs)("div",R({className:"spinner"},{children:[" ",(0,a.jsx)(G.Z,{size:"medium",variant:"base",assistiveText:{label:""}})]}))}))})}},42193:function(e,t,n){n.d(t,{BF:function(){return c},ZT:function(){return a}});var a=function(e){var t=e.syncStatusOptions;return{account:{"account1.name":{fieldId:"account1.name",filterId:"account1.name",fieldName:"Account Name",filterFieldType:"text-input",queryType:"$contains"},sync_status:{fieldId:"sync_status",filterId:"sync_status",fieldName:"Status",filterFieldType:"multiselect-dropdown",queryType:"$in",options:t,placeholder:"Select Status(s)"}},contact:{"contact1.name":{fieldId:"contact1.name",filterId:"contact1.name",fieldName:"Contact Name",filterFieldType:"text-input",queryType:"$contains"},sync_status:{fieldId:"sync_status",filterId:"sync_status",fieldName:"Status",filterFieldType:"multiselect-dropdown",queryType:"$in",options:t,placeholder:"Select Status(s)"}}}},c=function(e){return[{record_type:{$equals:e.module}},{client_id:{$equals:e.clientId}}]}},92790:function(e,t,n){n.d(t,{FT:function(){return b},GV:function(){return _},PN:function(){return x},VB:function(){return v},YM:function(){return h},zd:function(){return g}});var a=n(85893),c=n(27304),s=n(80008),o=n.n(s),i=n(74721),r=n(59994),l=n(90506),u=n(30808),d=n(67294),f=function(){return f=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var c in t=arguments[n])Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c]);return e},f.apply(this,arguments)},p=u.h.getState().user.timeZone,m="MM/DD/YYYY hh:mm:ss A",v={account:"account",contact:"contact"},h={account:{columnId:3,order:"desc"},contact:{columnId:4,order:"desc"}},g=["id","record_id","record_type","sync_status","date_created","date_modified","reason","account.sfid.name","retry_count","comments","audit_info"],y=function(e,t,n){if(!t)return"";if(!e)return"";var a=[];if(null!=n&&"null"!==n){var c=(null===JSON||void 0===JSON?void 0:JSON.parse(n))||"";a.push.apply(a,c.map((function(e){return e.field_name})))}else a.push.apply(a,(e||"").split(","));var s="";return a.forEach((function(e,n){var c="";t[e]&&(c=t[e].label),""!==c&&(s=s.concat(c),n!==a.length-1&&(s=s.concat(", ")))})),""===s?"There is no field to update":s},x=function(e,t,n,s,l){return[{name:"Account Name",cell:function(e){return(0,a.jsx)(c.Z,f({placement:"right",title:"".concat(e["account sfid name"]||"")},{children:(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:"".concat(e["account sfid name"]||"")})}))}))},sortable:!0,sortField:"account1.name"},{name:"Status",cell:function(t){var o=e.find((function(e){return e.label===t.sync_status}))||{label:""},u=(0,d.useState)(!1),p=u[0],m=u[1];return(0,a.jsxs)(a.Fragment,{children:["Updated"===o.label?(0,a.jsxs)("div",f({className:"cell-container"},{children:[(0,a.jsx)("p",{children:o.label||""}),(0,a.jsx)(c.Z,f({placement:"bottom",title:t.comments?y(t.comments,s,t.audit_info):"There is no field to update"},{children:(0,a.jsx)(i.Z,{})}))]})):"Creation failed"===o.label||"Updation failed"===o.label||"Linking failed"===o.label||"Unlinking failed"===o.label||"CRM auth failed"===o.label?(0,a.jsxs)("div",f({className:"cell-container"},{children:[(0,a.jsx)("p",{children:o.label||""}),(0,a.jsx)(c.Z,f({placement:"bottom",title:t.reason||o.label},{children:(0,a.jsx)(i.Z,{})}))]})):(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:o.label||""})})),t.retry_count>=3&&"logs"===l&&(0,a.jsx)(c.Z,f({placement:"right",title:"Click to reset the retry count"},{children:(0,a.jsx)("span",f({onClick:function(){p||(j({id:t.id,clientId:n}),m(!0))}},{children:(0,a.jsx)(r.Z,{sx:{width:"19px",height:"19px",marginTop:"2px",cursor:"pointer"}})}))}))]})},sortable:!0,sortField:"sync_status"},{name:"Date Created",cell:function(e){return(0,a.jsx)(c.Z,f({placement:"right",title:o()(e.date_created).tz(t).add(o()().tz(p).utcOffset(),"minutes").format(m)||""},{children:(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:o()(e.date_created).tz(t).add(o()().tz(p).utcOffset(),"minutes").format(m)||""})}))}))},sortable:!0,sortField:"date_created"},{name:"Date Modified",cell:function(e){return(0,a.jsx)(c.Z,f({placement:"right",title:o()(e.date_modified).tz(t).add(o()().tz(p).utcOffset(),"minutes").format(m)||""},{children:(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:o()(e.date_modified).tz(t).add(o()().tz(p).utcOffset(),"minutes").format(m)||""})}))}))},sortable:!0,sortField:"date_modified"}]},_=["id","record_id","record_type","sync_status","date_created","date_modified","reason","contact.sfid.name","retry_count","contact.sfid.account_name__c","comments","audit_info"],b=function(e,t,n,s,l){return[{name:"Contact Name",cell:function(e){return(0,a.jsx)(c.Z,f({placement:"right",title:"".concat(e["contact sfid name"]||"")},{children:(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:"".concat(e["contact sfid name"]||"")})}))}))},sortable:!0,sortField:"contact1.name"},{name:"Account Name",cell:function(e){return(0,a.jsx)(c.Z,f({placement:"right",title:"".concat(e["contact sfid account_name__c"]||"")},{children:(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:"".concat(e["contact sfid account_name__c"]||"")})}))}))},sortable:!0,sortField:"contact1.account_name__c"},{name:"Status",cell:function(t){var o=e.find((function(e){return e.label===t.sync_status}))||{label:""},u=(0,d.useState)(!1),p=u[0],m=u[1];return(0,a.jsxs)(a.Fragment,{children:["Updated"===o.label?(0,a.jsxs)("div",f({className:"cell-container"},{children:[(0,a.jsx)("p",{children:o.label||""}),(0,a.jsx)(c.Z,f({placement:"bottom",title:t.comments?y(t.comments,s,t.audit_info):"There is no field to update"},{children:(0,a.jsx)(i.Z,{})}))]})):"Creation failed"===o.label||"Updation failed"===o.label||"Linking failed"===o.label||"Unlinking failed"===o.label||"CRM auth failed"===o.label?(0,a.jsxs)("div",f({className:"cell-container"},{children:[(0,a.jsx)("p",{children:o.label||""}),(0,a.jsx)(c.Z,f({placement:"bottom",title:t.reason||o.label},{children:(0,a.jsx)(i.Z,{})}))]})):(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:o.label||""})})),t.retry_count>=3&&"logs"===l&&(0,a.jsx)(c.Z,f({placement:"right",title:"Click to reset the retry count"},{children:(0,a.jsx)("span",f({onClick:function(){p||(j({id:t.id,clientId:n}),m(!0))},className:"retry_icon"},{children:(0,a.jsx)(r.Z,{sx:{width:"19px",height:"19px",marginTop:"2px",cursor:"pointer"}})}))}))]})},sortable:!0,sortField:"sync_status"},{name:"Date Created",cell:function(e){return(0,a.jsx)(c.Z,f({placement:"right",title:o()(e.date_created).tz(t).add(o()().tz(p).utcOffset(),"minutes").format(m)||""},{children:(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:o()(e.date_created).tz(t).add(o()().tz(p).utcOffset(),"minutes").format(m)||""})}))}))},sortable:!0,sortField:"date_created"},{name:"Date Modified",cell:function(e){return(0,a.jsx)(c.Z,f({placement:"right",title:o()(e.date_modified).tz(t).add(o()().tz(p).utcOffset(),"minutes").format(m)||""},{children:(0,a.jsx)("div",f({className:"cell-container"},{children:(0,a.jsx)("p",{children:o()(e.date_modified).tz(t).add(o()().tz(p).utcOffset(),"minutes").format(m)||""})}))}))},sortable:!0,sortField:"date_modified"}]},j=function(e){var t=e.id,n=e.clientId;(0,l.D2)({method:"put",url:"".concat("https://marketplace-as-a-service.herokuapp.com/index.php/api/v1","/logs/reset"),path:"",headers:(0,l.Ry)(n),body:{id:Number(t),client_id:Number(n)}}).then((function(e){var t=new CustomEvent("dci-logs-reset-response",{detail:e});window.dispatchEvent(t)}))}},89389:function(e,t,n){n.r(t),n.d(t,{default:function(){return m}});var a=n(85893),c=n(15725),s=n(58593),o=function(){return o=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var c in t=arguments[n])Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c]);return e},o.apply(this,arguments)};function i(e){var t=e.title,n=e.subtitle;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",o({className:"title"},{children:t})),(0,a.jsx)("p",o({className:"subtitle"},{children:n}))]})}var r=n(22327),l=n(50503),u=n(1435),d=n(90952),f=n(16355),p=function(){return p=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var c in t=arguments[n])Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c]);return e},p.apply(this,arguments)},m=function(){var e=(0,r.$)().t,t=(0,u.CG)(d.Fw),n=(0,u.CG)(d.XI);return(0,a.jsxs)("div",p({className:"drawer-page-wrapper"},{children:[(0,a.jsx)(l.d,{}),(0,a.jsx)(c.ZP,p({container:!0,className:"".concat(t?"collapsed":""," page-with-drawer  logs-page")},{children:(0,a.jsxs)(c.ZP,p({item:!0,xs:12,className:"main-section"},{children:[(0,a.jsx)("div",{className:"lock-header-top"}),(0,a.jsx)("div",p({className:"lock-header-add-to-crm"},{children:(0,a.jsxs)("span",p({className:"page-heading"},{children:[(0,a.jsxs)("span",p({className:"flex"},{children:["#/logs"===n&&(0,a.jsx)(i,{title:e("logs.title"),subtitle:e("logs.subtitle")}),"#/logs-inventory"===n&&(0,a.jsx)(i,{title:e("logs-inventory.title"),subtitle:e("logs-inventory.subtitle")})]})),(0,a.jsx)("hr",{className:"page-heading-hr ".concat(t?"collapsed":"")})]}))})),"#/logs"===n&&(0,a.jsx)(s.UL,{}),"#/logs-inventory"===n&&(0,a.jsx)(f.dV,{})]}))}))]}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,